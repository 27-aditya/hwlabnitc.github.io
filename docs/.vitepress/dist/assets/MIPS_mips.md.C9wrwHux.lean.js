import{_ as e,a as t,b as i,c as p,d as l,e as r,f as o,g as d,h,i as c,j as g,k as u,l as k,m,n as b,o as f}from"./chunks/mips2-image-0009.DFxqnWYO.js";import{_ as y,c as E,a as s,a4 as n,j as a,o as $}from"./chunks/framework.DRnJpP2i.js";const L=JSON.parse('{"title":"MIPS","description":"","frontmatter":{},"headers":[],"relativePath":"MIPS/mips.md","filePath":"MIPS/mips.md"}'),v={name:"MIPS/mips.md"},w=n("",70),C=a("img",{src:e},null,-1),F=a("img",{src:t},null,-1),x=a("img",{src:i},null,-1),q=a("img",{src:p},null,-1),A=a("img",{src:l},null,-1),S=a("img",{src:r},null,-1),P=n("",322);function D(I,T,_,M,B,j){return $(),E("div",null,[w,s(" Run the program. If a breakpoint has been set the program will stop at the next breakpoint. "),C,s(" Trace (Step) Into. Executes a single instruction. If the instruction is a procedure call (jal) the simulator will stop at the first instruction of the procedure. "),F,s(" Backstep. Undo the last step taken in the code. "),x,s(" Pause the currently running program. Press the run button to continue execution. "),q,s(" Stop the currently running program. You will need to reset the simulator to execute the program again after stopping it. "),A,s(" Reset. Resets the simulator, reinitializing the registers, program counter, and memory. "),S,s(" Adjusts the speed that the simulator runs at. "),P])}const N=y(v,[["render",D]]);export{L as __pageData,N as default};
